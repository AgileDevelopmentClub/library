/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.library.restapi;

import com.example.library.restapi.dto.UserDto;
import com.example.library.restapi.dto.UsersDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-12-02T23:00:40.669106400+09:00[Asia/Tokyo]")

@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "", nickname = "usersGet", notes = "", response = UsersDto.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UsersDto.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UsersDto> usersGet();


    @ApiOperation(value = "", nickname = "usersUserIdDelete", notes = "", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/users/{userId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> usersUserIdDelete(@ApiParam(value = "", required = true) @PathVariable("userId") String userId);


    @ApiOperation(value = "", nickname = "usersUserIdGet", notes = "", response = UserDto.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDto.class) })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserDto> usersUserIdGet(@ApiParam(value = "", required = true) @PathVariable("userId") String userId);


    @ApiOperation(value = "", nickname = "usersUserIdPut", notes = "", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/users/{userId}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> usersUserIdPut(@ApiParam(value = "tags to filter by") @Valid UserDto users);

}
