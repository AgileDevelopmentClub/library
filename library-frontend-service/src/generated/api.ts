// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * books
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Bookaction
 */
export interface Bookaction {
    /**
     * 
     * @type {string}
     * @memberof Bookaction
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Bookaction
     */
    userId?: string;
}
/**
 * 本の検索結果オブジェクト
 * @export
 * @interface Books
 */
export interface Books {
    /**
     * 
     * @type {string}
     * @memberof Books
     */
    isbn?: string;
    /**
     * 
     * @type {string}
     * @memberof Books
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array | books}
     * @memberof InlineResponse200
     */
    books?: Array | books;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 本を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(options: any = {}): RequestArgs {
            const localVarPath = `/books`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 本に対する行動
         * @param {} UNKNOWN_PARAMETER_NAME 
         * @param {Bookaction} [bookaction] パラメータのISBNの
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnActionsPost(UNKNOWN_PARAMETER_NAME: , bookaction?: Bookaction, options: any = {}): RequestArgs {
            // verify required parameter 'UNKNOWN_PARAMETER_NAME' is not null or undefined
            if (UNKNOWN_PARAMETER_NAME === null || UNKNOWN_PARAMETER_NAME === undefined) {
                throw new RequiredError('UNKNOWN_PARAMETER_NAME','Required parameter UNKNOWN_PARAMETER_NAME was null or undefined when calling booksIsbnActionsPost.');
            }
            const localVarPath = `/books/{isbn}/actions`
                .replace(`{${"isbn"}}`, encodeURIComponent(String(UNKNOWN_PARAMETER_NAME)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Bookaction" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bookaction !== undefined ? bookaction : {}) : (bookaction || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnDelete(isbn: string, options: any = {}): RequestArgs {
            // verify required parameter 'isbn' is not null or undefined
            if (isbn === null || isbn === undefined) {
                throw new RequiredError('isbn','Required parameter isbn was null or undefined when calling booksIsbnDelete.');
            }
            const localVarPath = `/books/{isbn}`
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 本を登録する
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnPut(isbn: string, options: any = {}): RequestArgs {
            // verify required parameter 'isbn' is not null or undefined
            if (isbn === null || isbn === undefined) {
                throw new RequiredError('isbn','Required parameter isbn was null or undefined when calling booksIsbnPut.');
            }
            const localVarPath = `/books/{isbn}`
                .replace(`{${"isbn"}}`, encodeURIComponent(String(isbn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 本を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).booksGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 本に対する行動
         * @param {} UNKNOWN_PARAMETER_NAME 
         * @param {Bookaction} [bookaction] パラメータのISBNの
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnActionsPost(UNKNOWN_PARAMETER_NAME: , bookaction?: Bookaction, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).booksIsbnActionsPost(UNKNOWN_PARAMETER_NAME, bookaction, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnDelete(isbn: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).booksIsbnDelete(isbn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 本を登録する
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnPut(isbn: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).booksIsbnPut(isbn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 本を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(options?: any) {
            return DefaultApiFp(configuration).booksGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary 本に対する行動
         * @param {} UNKNOWN_PARAMETER_NAME 
         * @param {Bookaction} [bookaction] パラメータのISBNの
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnActionsPost(UNKNOWN_PARAMETER_NAME: , bookaction?: Bookaction, options?: any) {
            return DefaultApiFp(configuration).booksIsbnActionsPost(UNKNOWN_PARAMETER_NAME, bookaction, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnDelete(isbn: string, options?: any) {
            return DefaultApiFp(configuration).booksIsbnDelete(isbn, options)(axios, basePath);
        },
        /**
         * 
         * @summary 本を登録する
         * @param {string} isbn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIsbnPut(isbn: string, options?: any) {
            return DefaultApiFp(configuration).booksIsbnPut(isbn, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 本を検索する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksGet(options?: any) {
        return DefaultApiFp(this.configuration).booksGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 本に対する行動
     * @param {} UNKNOWN_PARAMETER_NAME 
     * @param {Bookaction} [bookaction] パラメータのISBNの
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksIsbnActionsPost(UNKNOWN_PARAMETER_NAME: , bookaction?: Bookaction, options?: any) {
        return DefaultApiFp(this.configuration).booksIsbnActionsPost(UNKNOWN_PARAMETER_NAME, bookaction, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} isbn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksIsbnDelete(isbn: string, options?: any) {
        return DefaultApiFp(this.configuration).booksIsbnDelete(isbn, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary 本を登録する
     * @param {string} isbn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksIsbnPut(isbn: string, options?: any) {
        return DefaultApiFp(this.configuration).booksIsbnPut(isbn, options)(this.axios, this.basePath);
    }

}


