// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * libraryApplication
 * 図書館アプリのライブラリ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 貸出帳の検索結果オブジェクト
 * @export
 * @interface LendingRecordDto
 */
export interface LendingRecordDto {
    /**
     * 
     * @type {string}
     * @memberof LendingRecordDto
     */
    isbn?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingRecordDto
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingRecordDto
     */
    namae?: string;
    /**
     * 
     * @type {string}
     * @memberof LendingRecordDto
     */
    simei?: string;
}
/**
 * 貸出帳のオブジェクト
 * @export
 * @interface LendingRecordsDto
 */
export interface LendingRecordsDto {
    /**
     * 
     * @type {Array<LendingRecordDto>}
     * @memberof LendingRecordsDto
     */
    lendingRecords?: Array<LendingRecordDto>;
}
/**
 * ランキングを表現する。idは呼び出し元の使い方により、userId等に読み替えられるようにする。
 * @export
 * @interface RankingDto
 */
export interface RankingDto {
    /**
     * 
     * @type {string}
     * @memberof RankingDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof RankingDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RankingDto
     */
    num: number;
}
/**
 * ランキングのリスト
 * @export
 * @interface RankingsDto
 */
export interface RankingsDto {
    /**
     * 
     * @type {Array<RankingDto>}
     * @memberof RankingsDto
     */
    rankings: Array<RankingDto>;
}

/**
 * LendingRecordsApi - axios parameter creator
 * @export
 */
export const LendingRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 貸出帳を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lendingRecordsGet(options: any = {}): RequestArgs {
            const localVarPath = `/lendingRecords`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LendingRecordsApi - functional programming interface
 * @export
 */
export const LendingRecordsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 貸出帳を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lendingRecordsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LendingRecordsDto> {
            const localVarAxiosArgs = LendingRecordsApiAxiosParamCreator(configuration).lendingRecordsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LendingRecordsApi - factory interface
 * @export
 */
export const LendingRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 貸出帳を検索する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lendingRecordsGet(options?: any) {
            return LendingRecordsApiFp(configuration).lendingRecordsGet(options)(axios, basePath);
        },
    };
};

/**
 * LendingRecordsApi - object-oriented interface
 * @export
 * @class LendingRecordsApi
 * @extends {BaseAPI}
 */
export class LendingRecordsApi extends BaseAPI {
    /**
     * 
     * @summary 貸出帳を検索する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingRecordsApi
     */
    public lendingRecordsGet(options?: any) {
        return LendingRecordsApiFp(this.configuration).lendingRecordsGet(options)(this.axios, this.basePath);
    }

}


/**
 * RankingApi - axios parameter creator
 * @export
 */
export const RankingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 本の貸し出しランキングを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingBooksGet(options: any = {}): RequestArgs {
            const localVarPath = `/ranking/books`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RankingApi - functional programming interface
 * @export
 */
export const RankingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 本の貸し出しランキングを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingBooksGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RankingsDto> {
            const localVarAxiosArgs = RankingApiAxiosParamCreator(configuration).rankingBooksGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RankingApi - factory interface
 * @export
 */
export const RankingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 本の貸し出しランキングを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingBooksGet(options?: any) {
            return RankingApiFp(configuration).rankingBooksGet(options)(axios, basePath);
        },
    };
};

/**
 * RankingApi - object-oriented interface
 * @export
 * @class RankingApi
 * @extends {BaseAPI}
 */
export class RankingApi extends BaseAPI {
    /**
     * 
     * @summary 本の貸し出しランキングを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public rankingBooksGet(options?: any) {
        return RankingApiFp(this.configuration).rankingBooksGet(options)(this.axios, this.basePath);
    }

}


